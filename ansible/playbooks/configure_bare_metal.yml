---

  # This playbook is responsible for:
  #   --> Install ISO image on Hetzner Server
  #   --> Install basic packages to server 
  #   --> Install Proxmox VE
  #   --> Create Proxmox thin and backups storage
  
- hosts: hetzner
  gather_facts: false

  roles:
    - install_hetzner_image

- hosts: hetzner
  gather_facts: false

  vars:
    remove_apt_repo: deb https://enterprise.proxmox.com/debian/pve buster pve-enterprise

    # Bash groups to create.
    create_groups:
        - name: sudo
          group_name: sudo
        - name: www-data
          group_name: www-data
          
    # List of bash users to create.
    users:
      - name: mario
        username: mario
        uid: 1100
        password: "{{ mario_password }}"
        comment: User mario must be on every server.
        home: yes
        update_password: on_create
        generate_ssh_key: yes
        shell: /bin/bash
        groups: [sudo,www-data]
        user_state: present
      
      - name: victor
        username: victor
        uid: 1101
        password: "{{ victor_password }}"
        comment: User victor
        home: yes
        update_password: on_create
        generate_ssh_key: yes
        shell: /bin/bash
        groups: [sudo,www-data]
        user_state: present

    
    # Install Proxmox       
    key_url_list: http://download.proxmox.com/debian/proxmox-ve-release-6.x.gpg
    add_repo_list:
      - deb http://download.proxmox.com/debian/pve buster pve-no-subscription
    remove_apt_repo: deb https://enterprise.proxmox.com/debian/pve buster pve-enterprise
              
  tasks:
    - include_vars: secrets.yml # User passwords

    - name: First create the groups of the user
      group:
        name: "{{ item.group_name }}"
        state: present
      with_items: "{{ create_groups }}"
      when: create_groups is defined

    - name: Create user on system defined on vars
      user:
        name: "{{ item.username }}" 
        password: "{{ item.password }}"
        uid: " {{ item.uid | default(omit) }}"
        comment: "{{ item.coment | default(omit) }}" 
        append: no
        create_home: "{{ item.home | default(omit) }}"
        force: no
        generate_ssh_key: "{{ item.generate_ssh_key | default(omit) }}"
        shell: "{{ item.shell }}" 
        ssh_key: "{{ item.ssh_key | default(omit) }}"
        state: present
        groups: "{{ item.groups | join(',') if 'groups' in item else '' }}"
        expires: "{{ item.expires | default(omit) }}"
      with_items: "{{ users }}"
      when: users is defined
    
    - name: Change root password
      user:
        name: root
        password: "{{ root_password }}"
        state: present
      when: root_password is defined

    - name: Install basic apt packages to server
      apt:
        name: "{{ apt_package_list }}"
        state: present
        update_cache: yes
      when: apt_package_list is defined

    - name: First add the apt Proxmox repository key
      apt_key:
        url: "{{ key_url_list }}" 
        state: present
      when: key_url_list is defined
    
    - name: Add an apt Proxmox repository
      apt_repository:
        repo: "{{ item }}" 
        state: present
      with_items: "{{ add_repo_list }}"
      when: add_repo_list is defined

    - name: Install basic apt packages to server
      apt:
        name: "{{ apt_package_proxmox_list }}"
        state: present
        update_cache: yes
      when: apt_package_proxmox_list is defined

    - name: Remove apt repository
      apt_repository:
        repo: "{{ remove_apt_repo }}"
        state: absent
      when: remove_apt_repo is defined

      # /etc/sysctl.conf:
      # net.ipv4.ip_forward = 1
    - name: Activate ipv4 ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes
       
- hosts: hetzner
  gather_facts: false
  
  # Second part, configure proxmox node.

  vars:
    # Proxmox role add task or not.
    pfsense_conf_opt: 'yes'
    manage_groups_opt: 'yes'
    manage_users_opt: 'yes'
    add_firewall_rule_opt: 'yes'
    install_proxmox_opt: 'no'

    # Generate SSL cert
    servername: "{{ ansible_host }}"
    certbot_admin_email: victor.moreno@intelligenia.com
    create_ssl_certificate_opt: 'yes'

    # Create cluster vars
    # Corosync links.
    link0_flag: "--link0"
    link1_flag: "--link1"
    link0: 192.168.100.1
    link1: 192.168.200.1

    # Proxmox users / groups
    create_groups_opt: 'yes'

  roles:
    - proxmox

  post_tasks:
    # Post role tasks:
    # Create cluster if master
    # Configure storages

    - name: Check if cluster exists
      stat:
        path: /etc/pve/corosync.conf
      register: stat_result

    - name: Display if corosync file exists 
      debug:
        msg: "A corosync config file exists on /etc/pve/corosync.conf, delete it and try again."
      when: stat_result.stat.exists

    - name: If there is no cluster, create one
      command: >- 
        pvecm create {{ clustername }}
        {% if link0 is defined %}
        {{ link0_flag }} {{ link0 }}
        {% endif %}
        {% if link1 is defined %}
        {{ link1_flag }} {{ link1 }}
        {% endif %}
      when: not stat_result.stat.exists and create_cluster_opt == 'yes'

    - name: Create thin storage
      command: >-
        pvesh create /storage --storage thin --type lvmthin --vgname vg00 --thinpool thin
      when: master == 'yes'

    - name: Create backup LV 
      lvol:
        vg: vg00
        lv: backups
        size: 20G

    - name: Create an ext4 filesystem on 
      filesystem:
        fstype: ext4
        dev: /dev/vg00/backups

    - name: Create backups directory
      file:
        path: /mnt/proxmox-backups
        state: directory
        mode: '0755'

    - name: Add entry on /etc/fstab
      lineinfile:
        path: /etc/fstab
        line: '/dev/vg00/backups  /mnt/proxmox-backups  ext4  defaults 0 0'

    - name: Restart server and wait for item
      reboot:
        msg: "Reboot by Ansible"
        connect_timeout: 10
        reboot_timeout: 600
        test_command: whoami

    - name: Create backups storage after restart
      command: >-
        pvesh create /storage --storage backups --type dir --path /mnt/proxmox-backups --content --content backup
      when: master == 'yes'