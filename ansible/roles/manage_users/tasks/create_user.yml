--- 

- include_vars: users.yml
- include_vars: secrets.yml
- include_vars: pve_users.yml

- name: First create the groups of the user
  group:
    name: "{{ item.group_name }}"
    state: present
  with_items: "{{ create_groups }}"
  when: create_groups is defined

- name: Create user on system defined on vars/users.yml or defaults/main.yml file
  user:
    name: "{{ item.username }}" 
    password: "{{ item.password }}"
    uid: " {{ item.uid | default(omit) }}"
    comment: "{{ item.coment | default(omit) }}" 
    append: no
    create_home: "{{ item.home | default(omit) }}"
    force: no
    generate_ssh_key: "{{ item.generate_ssh_key | default(omit) }}"
    shell: "{{ item.shell }}" 
    ssh_key: "{{ item.ssh_key | default(omit) }}"
    state: present
    groups: "{{ item.groups | join(',') if 'groups' in item else '' }}"
    expires: "{{ item.expires | default(omit) }}"
  with_items: "{{ users }}"
  when: users is defined

  #- name: Create users block
  #  block:
  #- name: Check if PVE users alredy exists and skip task
  #  shell: 'pvesh get /access/users --noborder --noheader | grep {{ item.username }}'
  #  #no_log: true
  #  register: user_exists
  #  #ignore_errors: yes
  #  with_items: "{{ pve_users }}"
  #  when: pve_users is defined
  #  #
  #  #  rescue:
  #- name: Create PVE user {{ item.username }}
  #  command: 'pveum useradd {{ item.username }}@pam'
  #  #no_log: true
  #  with_items: "{{ pve_users }}"
  #  when: (pve_users is defined) 
  #
  #- name: Change the password to PVE user {{ item.username }}
  #  command: 'pvesh set /access/password --userid "{{ item.username }}@pam" --password "{{ item.password }}"'
  #  #no_log: true
  #  notify:
  #    - restart pve gui
  #  with_items: "{{ pve_users }}"
  #  when: (pve_users is defined)
